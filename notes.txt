


On training pytorch model over kubernetes cluster of GPUs:
https://towardsdatascience.com/pytorch-distributed-on-kubernetes-71ed8b50a7ee








Based on: https://kubernetes.io/docs/tutorials/kubernetes-basics/





Nodes and control plane (orchestrator node)

kubectl cluster-info

## view provisioned nodes 
kubectl get nodes

## deploy an image to a node
kubectl create deployment kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1

The above searches for a suitable node where an instance of the application could be run
It scheduled the application to run on that Node
It configured the cluster to reschedule the instance on a new Node when needed



kubectl get deployments


By default deployments are visible from other pods and services within the same kubernetes cluster


# Create a proxy that will forward communications into the cluster-wide, private network
kubectl proxy


# get pod name
export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')
echo Name of the Pod: $POD_NAME


# the proxy lets you access the cluster via a local host, using the POD_NAME variable
curl http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME/


Pod = 1+ containers
A pod contains containers and a storage volume


A pod runs on a 'node', where a node runs on 1+ VMs
A single VM can run multiple pods



Each node runs at least:
1. Kubelet: process responsible for communication between the Kubernetes control plane and the Node
2. A container runtime (like Docker) responsible for pulling the container image from a registry, unpacking the container, and running the application.



kubectl get pods - list resources
kubectl describe pods - show detailed information about a resource
kubectl logs $POD_NAME  - print the logs from a container in a pod
kubectl exec - execute a command on a container in a pod

kubectl exec $POD_NAME -- env       # view env variables on pod
kubectl exec -ti $POD_NAME -- bash  # start a bash session into the pod's container
exit                                # quit bash session to pod's container




When a worker node dies, the Pods running on the Node are also lost



A Service in Kubernetes is an abstraction which defines a logical set of Pods and a policy by which to access them.
   (good way of having stable IP address, tho pods have their own IPs)


A Service is defined using YAML (preferred) or JSON, like all Kubernetes objects. The set of Pods targeted by a Service is usually determined by a LabelSelector.


Services can be exposed in several ways, Cluster IP, Load balancer, and other options
(more on the exposure options: https://kubernetes.io/docs/tutorials/kubernetes-basics/expose/expose-intro/)


kubectl get services


# create a new service 'kubernetes-bootcamp' and expose it on a given port
kubectl expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080


# get port of this new service
export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template='{{(index .spec.ports 0).nodePort}}')



kubectl describe deployment


# look at pods for kubernetes-bootcamp specifically
kubectl get pods -l app=kubernetes-bootcamp


# -l refers to the label of the service: basically selecting it by name
kubectl delete service -l app=kubernetes-bootcamp


Can scale to zero


A ReplicaSet's purpose is to maintain a stable set of replica Pods running at any given time. It is often used to guarantee the availability of a specified number of identical Pods.

A ReplicaSet ensures that a specified number of pod replicas are running at any given time. 



# rs = ReplicaSets
kubectl get rs



# get info about replicaset 'kubernetes-bootcamp-fb5c67579'
kubectl describe rs/kubernetes-bootcamp-fb5c67579



# expand kubernetes-bootcamp deployment to 4 pods
kubectl scale deployments/kubernetes-bootcamp --replicas=4 deployment.apps/kubernetes-bootcamp scaled



kubectl get pods


# a service of 1+ replicasets. shows you IP of service and Endpoint IPs of individual instances
kubectl describe services/kubernetes-bootcamp



Rolling updates allow Deployments' update to take place with zero downtime by incrementally updating Pods instances with new ones. 



# update image deployed to deployment. 'set image' is the key command that does this
kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2


# to confirm 'set image' update
kubectl rollout status deployments/kubernetes-bootcamp



# revert deployment to previous known state
kubectl rollout undo deployments/kubernetes-bootcamp



architecture is specified with a file: kubernetes.yaml



minikube quickly sets up a local Kubernetes cluster 
































